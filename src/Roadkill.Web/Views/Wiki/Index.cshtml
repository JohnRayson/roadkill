@model PageViewModel
@{ 
	ViewBag.Title = Model.Title;
}

@section PageToolbar
{  
	@* This is rendered by an action (and not a partial/extension method) for future donut caching *@
	@Html.Action("PageToolBar", "Wiki", new { id = Model.Id })
}

@section ViewHistoryLink
{
	<div id="viewhistory">@Html.ActionLink(SiteStrings.Navigation_ViewHistory, "History", "Pages", new { id = Model.Id }, null)</div>
}

<h1 class="pagetitle">@Model.Title</h1>
<script src="@(Url.Content("~/Assets/Scripts/highlight/highlight.pack.js"))" ></script>
<link rel="stylesheet" href="@(Url.Content("~/Assets/CSS/highlight/vs.css"))" />
<script>
    // enable the syntax highlighting from highlight.js
    $(document).ready(function () {
        
        $("pre code").each(function (i, block) {
            hljs.highlightBlock(block);
        });
    });
</script>

<div id="pagecontent">
@MvcHtmlString.Create(Model.ContentAsHtml)
</div>

@section PageDetailsFooter
{
@SiteStrings.Shared_LastModified <span id="lastmodified-on" title="@Model.ModifiedOnWithOffset">@Model.ModifiedOnWithOffset</span>.
}

@section PluginHead
{
	<!-- Plugins -->
	@Html.Raw(Model.PluginHeadHtml)<!-- End plugins head -->
}

@section PluginPreContainer
{
	@MvcHtmlString.Create(Model.PluginPreContainer)
}

@section PluginPostContainer
{
	@MvcHtmlString.Create(Model.PluginPostContainer)
}

@section PluginFooter
{
	@MvcHtmlString.Create(Model.PluginFooterHtml)
}